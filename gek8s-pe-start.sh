#!/bin/bash
# Copyright 2019 CRS4.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -o nounset
set -o errexit
set -o pipefail
set -o errtrace

# set the current version number
VERSION="0.1"

# initialize the bash environment if needed
# . /Archive/Software/Modules/3.2.10/init/bash

# portable version of abspath
function abspath() {
    local path="${*}"
    
    if [[ -d "${path}" ]]; then
        echo "$( cd "${path}" >/dev/null && pwd )"
    else
        echo "$( cd "$( dirname "${path}" )" >/dev/null && pwd )/$(basename "${path}")"
    fi
}

function script_dir() {
  echo "$(dirname $(abspath ${BASH_SOURCE[0]}))"
}

function print_version() {
  echo "${VERSION}"
}

function log() {
    echo -e "${@}" >&2
}

function debug_log() {
    if [[ -n "${DEBUG:-}" ]]; then
        echo -e "DEBUG: ${@}" >&2
    fi
}

function error_log() {
    echo -e "ERROR: ${@}" >&2
}

function error_trap() {
    error_log "Error at line ${BASH_LINENO[1]} running the following command:\n\n\t${BASH_COMMAND}\n\n"
    error_log "Stack trace:"
    for (( i=1; i < ${#BASH_SOURCE[@]}; ++i)); do
        error_log "$(printf "%$((4*$i))s %s:%s\n" " " "${BASH_SOURCE[$i]}" "${BASH_LINENO[$i]}")"
    done
    exit 2
}

trap error_trap ERR

function usage_error() {
    if [[ $# > 0 ]]; then
        echo -e "ERROR: ${@}" >&2
    fi
    help
    exit 2
}

function help() {
    local script_name=$(basename "$0")
    echo -e "\nUsage: ${script_name} [-f ge_k8s_config_file] <ge_k8s_machine_file>

    - ge_k8s_machine_file:              path of the machine file generated by GE (default: ${TMPDIR}/machines)
    - GE_K8S_NODE_START_SCRIPT          path to the script to join and boostrap a k8s node
     
    The following variables are defined by the user as environment variables:

     - ge_k8s_config_file:               defines environment variables to configure the ge-k8s join
     - GE_K8S_KUBEADM_CONFIG_TEMPLATE:   template of kubeadm config file
                                         actual values come from variables defined on GE_K8S_CONFIG_FILE
    ">&2
}

# set default GE_K8S_CONFIG_FILE
config_file=${GE_K8S_CONFIG_FILE:-"$(script_dir)/config.sh"}

# Collect arguments to be passed on to the next program in an array, rather than
# a simple string. This choice lets us deal with arguments that contain spaces.
positional_parameters=()

environment_variables=()

# parse arguments
while [ -n "${1-}" ]; do
    # Copy so we can modify it (can't modify $1)
    OPT="$1"
    # Detect argument termination
    if [ x"$OPT" = x"--" ]; then
        shift
        for OPT ; do
            # append to array
            positional_parameters+=("$OPT")
        done
        break
    fi
    # Parse current opt
    while [ x"$OPT" != x"-" ] ; do
        case "$OPT" in
            -f|--config-file=* )
                ge_k8s_config_file="${OPT#*=}"
                shift
                ;;
            -v )
                environment_variables+=("${2}")
                shift
                ;;                  
            * )
                # append to array
                positional_parameters+=("$OPT")
                break
                ;;
        esac
        # Check for multiple short options
        # NOTICE: be sure to update this pattern to match valid options
        NEXTOPT="${OPT#-[cfr]}" # try removing single short opt
        if [ x"$OPT" != x"$NEXTOPT" ] ; then
            OPT="-$NEXTOPT"  # multiple short opts, keep going
        else
            break  # long form, exit inner loop
        fi
    done
    # move to the next param
    shift
done

# TODO: remove me!!!
for v in "${environment_variables[@]}"; do
echo "Param: $v"
done

# check whether there exists at least one argument
if [[ ${#positional_parameters[@]} -lt 1  ]]; then
    error_log "Invalid number of arguments"
    help
    exit 1
fi

# check whether the config-file exists
if [[ ! -f "${ge_k8s_config_file}" ]]; then
    error_log "Config file ${ge_k8s_config_file} doen't exist!"
    exit 1
fi

# check whether the machine file generated by SGE exists
if [[ ! -f "${ge_k8s_machine_file}" ]]; then
    error_log "Machine file doen't exist!"
    exit 1
fi

# load configuration from file
source "${ge_k8s_config_file}"

# load environment module for running the pdsh parallel shell tool
module load pdsh

# prepare the host list as needed by pdsh, i.e., host1,host2,hostn
# it might be useless, depending on the format of the machine file directly generated by SGE
for host in $(cat ${ge_k8s_machine_file} | awk '{print $1}'); do
    hostlist="${hostlist}${host},"
done

# launch the k8s join on each SGE allocated node
pdsh -w ${hostlist} "<PATH_TO_THE_GE_K8S_START_BINARY> \
                     ${node_start_script} \
                     ${GE_K8S_CONFIG_FILE} ${GE_K8S_KUBEADM_CONFIG_TEMPLATE}"